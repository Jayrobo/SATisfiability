	//serial soultion test:
	/*bool clause_true = false; //keeps track if clause is true
	int i = 0; //row
	int j = 0; //col
	int k;// possible ans index

	while (i < Clauses.size()) {
		while (!clause_true) {
			for (k = 0; k < maxi; k++) { // check if clause has item in Possible Ans
				if (Clauses[i][j] == Possible_Ans[k]) {
					clause_true = true; //check next element
					i++; j = 0; // check next clause
					cout << endl << "Clauses "<<i<<"_"<<j << " == " << Possible_Ans[k]<<endl;
					break; //just need one true to validate clause
				} //else keep checking other elements of solution
			}
			if (!clause_true && j < Clauses[i].size()) {
				j++; //check next variable
			}
			if (!clause_true && j > Clauses[i].size()){
				Possible_Ans[k-1] = 0 - (Possible_Ans[k-1]); //try again
				 j= 0;}
		}

		if (i == Clauses.size() && clause_true) {
			cout << "Solution = (";
			for (int k = 0; k < maxi; k++)
				cout<< Possible_Ans[k]<< ", ";
			cout << ")" << endl;
		}

	}*/

	///////////////////////////////////////////////////////////////////serial soultion test:///////////////////////////////////
	bool clause_true = false; //keeps track if clause is true
	int i = 0; //row
	int j = 0; //col
	int k;// possible ans index

	while (i < Clauses.size()) {
		while (!clause_true) {
				
			k = abs(Clauses[i][j]);
				if (Clauses[i][j] == Possible_Ans[k]) {
					clause_true = true; //check next element
					i++; j = 0; // check next clause
					cout << endl << "Clauses "<<i<<"_"<<j << " == " << Possible_Ans[k]<<endl;
					break; //just need one true to validate clause
				} //else keep checking other elements of solution

			if (!clause_true && j < Clauses[i].size()) {
				j++; //check next variable
			}
			if (!clause_true && j > Clauses[i].size()){
				Possible_Ans[k-1] = 0 - (Possible_Ans[k-1]); //try again
				 j= 0;}
		}

		if (i == Clauses.size() && clause_true) {
			cout << "Solution = (";
			for (int k = 0; k < maxi; k++)
				cout<< Possible_Ans[k]<< ", ";
			cout << ")" << endl;
		}

	}




		/*
	//serial soultion test:
	bool clause_true = false; //keeps track if clause is true
	int i = 0; //row
	int j = 0; //col
	int k;// possible ans index

	while (i < Clauses.size()) {
		while (!clause_true) {
			for (k = 0; k < Possible_Ans.size(); k++) { // check if clause has item in Possible Ans
				if (Clauses[i][j] == Possible_Ans[k]) {
					clause_true = true; //check next element
					i++; j = 0; // check next clause
					cout << endl << "Clauses "<<i<<"_"<<j << " == " << Possible_Ans[k]<<endl;
					break; //just need one true to validate clause
				} //else keep checking other elements of solution
			}
			if (!clause_true && j < Clauses[i].size()) {
				j++; //check next variable
			}
			if (!clause_true && j > Clauses[i].size()){
				Possible_Ans[k-1] = 0 - (Possible_Ans[k-1]); //try again
				 j= 0;}
		}
	}
	*/